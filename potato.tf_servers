// ==UserScript==
// @name     potato.tf Server Browser
// @version  1
// @grant    none
// @include  https://potato.tf/servers
// @run-at   document-idle
// @description This script filters the list of servers listed by the potatoe.tf server browser based on filter criteria
// ==/UserScript==

"use strict";

//save load from localstorage?

let config = {
  difficulty: new Set(["Expert", "Advanced", "Intermediate"]),
  completed: new Set(["true", "false"]),
  wave: {
    min: 0,
    max: 8
  },
  status: new Set(["Setup", "Waiting", "In-Wave"]),
  players: {
    min: 0,
    max: 6
  },
  replace_connect: true
}

function start() {

  let control = `
<div id="filter_panel" style="background-color: white; position: absolute;top: 70px;right: 10px;display: flex; flex-direction: column; font-size: unset;">
  <div id="filters">
    <fieldset>
      <legend>Difficulty</legend>
      <div>
        <input type="checkbox" id="expert" name="difficulty" value="Expert" data-type="list" checked />
        <label for="expert">Expert</label>
      </div>
      <div>
        <input type="checkbox" id="advanced" name="difficulty" value="Advanced" data-type="list" checked />
        <label for="advanced">Advanced</label>
      </div>
      <div>
        <input type="checkbox" id="intermediate" name="difficulty" value="Intermediate" data-type="list" checked />
        <label for="intermediate">Intermediate</label>
      </div>
    </fieldset>

    <fieldset>
      <legend>Mission</legend>
      <div>
        <input type="checkbox" id="completed" name="completed" value="true" data-type="list" checked />
        <label for="completed">Completed</label>
      </div>
      <div>
        <input type="checkbox" id="not_completed" name="completed" value="false" data-type="list" checked />
        <label for="not_completed">Not Completed</label>
    </div>
    </fieldset>

    <fieldset>
      <legend>Wave</legend>
      <div>
        <input type="number" id="wave_max" name="wave" data-bound="max" value="8"/>
        <label for="wave_max">max</label>
      </div>
      <div>
        <input type="number" id="wave_min" name="wave" data-bound="min" value="0"/>
        <label for="wave_min">min</label>
      </div>
    </fieldset>

    <fieldset>
      <legend>Status</legend>
      <div>
        <input type="checkbox" id="setup" name="status" value="Setup" data-type="list" checked />
        <label for="setup">Setup</label>
      </div>
      <div>
        <input type="checkbox" id="waiting" name="status" value="Waiting" data-type="list" checked />
        <label for="waiting">Waiting</label>
      </div>
      <div>
        <input type="checkbox" id="inwave" name="status" value="In-Wave" data-type="list" checked />
        <label for="inwave">In-Wave</label>
      </div>
    </fieldset>

    <fieldset>
      <legend>Players</legend>
      <div>
        <input type="number" id="player_max" name="players" data-bound="max" value="6"/>
        <label for="player_max">max</label>
      </div>
      <div>
        <input type="number" id="player_min" name="players" data-bound="min" value="0"/>
        <label for="player_min">min</label>
      </div>
    </fieldset>
  </div>
  <div id="options">
    <fieldset>
      <legend>Options</legend>
      <div>
        <input type="checkbox" id="replace_links" name="replace_connect" data-type="boolean" checked/>
        <label for="replace_links">Replace Links</label>
      </div>
    </fieldset>
  </div>
</div>`

  document.body.insertAdjacentHTML("beforeend", control)

  const ingredients = document.querySelectorAll("#filter_panel fieldset div input");

  for (const ingredient of ingredients) {
    ingredient.addEventListener("click", updateDisplay);
  }

  function updateDisplay(e) {
    if (e.target.type == "checkbox" && e.target.dataset.type == "list") {
      if (e.target.checked) {
        config[e.target.name].add(e.target.value);
      }
      else {
        config[e.target.name].delete(e.target.value);
      }
    }
    else if (e.target.type == "checkbox" && e.target.dataset.type == "boolean") {
      config[e.target.name] = e.target.checked
    }
    else if (e.target.type == "number") {
      config[e.target.name][e.target.dataset.bound] = e.target.value;
    }
    else {
      console.log("error");
    }
    //run filter immediatly?
  }
  r();
}

function r() {
  //save server list to avoid resparse between updates?
  let servers = document.getElementById("serverDeck").childNodes;

  for (const server of servers) {
    if (server instanceof HTMLDivElement) {
      let cols = server.childNodes;

      //const server = cols[1].childNodes[1];
      const map = cols[3].childNodes[1].textContent;

      const mission = cols[5].childNodes[1].textContent.trim();
      const done = cols[5].childNodes[1].childNodes.length > 1 ? true : false;

      const difficulty = cols[7].childNodes[1].childNodes[0].textContent;
      const wave = cols[9].childNodes[1].textContent;
      const wave_current = parseInt(wave.split('/')[0].trim());
      const wave_total = parseInt(wave.split('/')[1].trim()); // can be '?'
      const state = cols[11].childNodes[1].textContent;

      const players_present = parseInt(cols[13].childNodes[1].childNodes[0].textContent.split('/')[0].trim()); // ignores (+n)

      //const players_total = cols[13].childNodes[1].childNodes[1].textContent;
      //const players_total = cols[13].childNodes[1].childNodes[2].textContent;
      //const classes = cols[15].childNodes[1];

      const connect = cols[17].childNodes[1]; //ping filter?

      if (config.replace_connect) {
        const text = "connect " + connect.href.split('/')[4];

        let write = function (e) {
          navigator.clipboard.writeText(text)
            .then(
              () => { },
              (e) => {
                console.log(e)
              }
            );
          e.preventDefault();
        };

        connect.addEventListener("click", write, false);
        connect.onclick = ""; //nessary?
      }

      if (!config.difficulty.has(difficulty) || !config.status.has(state) ||
        config.wave.max < wave_current || config.wave.min > wave_current ||
        config.players.max < players_present || config.players.min > players_present ||
        !config.completed.has(done.toString())) {
        server.style.display = "none";
        //server.style.cssText = "background-color: red !important";
      }
      else {
        server.style.display = "";
        //server.style.cssText = "";
      }
    }
  }
  //sync to native server list update?
  setTimeout(r, 1000);
}

start();
